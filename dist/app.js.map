{"version":3,"sources":["../server/app.js"],"names":["app","pid","process","PORT","env","limiter","RateLimit","windowMs","max","delayMs","cluster","isMaster","n_cpus","os","cpus","length","console","log","i","fork","use","express","json","limit","bodyParser","errorHandler","developmentErrors","urlencoded","extended","routes","req","res","next","header","static","path","join","__dirname","get","sendFile","productionErrors","listen","mongoose","connect","config","DB_DEV","useNewUrlParser","useUnifiedTopology","err","on","worker","id"],"mappings":"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","file":"app.js","sourcesContent":["import express from \"express\";\r\nconst app = express();\r\nimport mongoose from \"mongoose\";\r\nimport bodyParser from \"body-parser\";\r\nimport path from \"path\";\r\nimport mongoSanitize from \"express-mongo-sanitize\";\r\nimport xss from \"xss-clean\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport RateLimit from \"express-rate-limit\";\r\nimport compression from \"compression\";\r\nimport helmet from \"helmet\";\r\nimport morgan from \"morgan\";\r\nimport config from \"./config\";\r\nimport errorHandler from \"./handlers/errorHandler\";\r\nimport cors from \"cors\";\r\nimport os from \"os\";\r\nimport cluster from \"cluster\";\r\nimport routes from \"./routes/index\";\r\nconst pid = process.pid\r\nconst PORT = process.env.PORT || 7000;\r\n\r\nconst limiter = new RateLimit({\r\n    windowMs: 15 * 60 * 1000, // 15 minutes \r\n    max: 1000, // limit each IP to 1000 requests per windowMs \r\n    delayMs: 0 // disable delaying â€” full speed until the max limit is  reached\r\n});\r\nif(cluster.isMaster){\r\n    const n_cpus = os.cpus().length\r\n    console.log(`Forking ${n_cpus} CPUS`)\r\n    console.log(`Master has ${process.pid} process running`)\r\n    for(let i=0; i < n_cpus; i++){\r\n        cluster.fork()\r\n    }\r\n} else {\r\n    app.use(cors());\r\n\r\n    app.use(helmet());\r\n    app.use(compression()); // compress all incoming data\r\n    app.use(express.json({ limit: '100kb' })); // limit body payload to 100kb\r\n    app.use(mongoSanitize()); // data sanitization against NoSQL injection attacks\r\n    app.use(xss());  // data sanitization against XSS attacks (cross-site scripting)\r\n    app.use(bodyParser.json());\r\n\r\n    app.use(morgan('dev'));\r\n    app.use(errorHandler.developmentErrors); //catch development errors\r\n    app.use(bodyParser.urlencoded({ extended: true}));\r\n    app.use(cookieParser());\r\n    app.use(limiter); // setting limiter on routes, preventing DOS attack\r\n    app.use('/', routes);\r\n    \r\n    app.use((req, res, next) => {\r\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n        res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\r\n        next()\r\n    });\r\n    \r\n    // if (process.env.NODE_ENV === 'production') {\r\n        app.use(express.static(path.join(__dirname, '../blackrevclient/build')));\r\n        \r\n          // Handle React routing, return all requests to React app\r\n        app.get('*', (req, res) => {\r\n            res.sendFile(path.join(__dirname, '../blackrevclient/build', 'index.html'));\r\n        })\r\n\r\n        // catch production errors\r\n        app.use(errorHandler.productionErrors)\r\n    // }\r\n    \r\n    app.listen(PORT, () => {\r\n        mongoose.connect(config.DB_DEV, { useNewUrlParser: true,  useUnifiedTopology: true }, (err,res)=>{\r\n          try {\r\n              console.log('Connected to Database');\r\n          } catch (err) {\r\n              throw err;\r\n          }\r\n        })\r\n        console.log(`App started on ${PORT} using process ${pid}`)\r\n    })\r\n}\r\ncluster.on('exit', (worker) => {\r\n    console.log(`Worker, ${worker.id} is no more`)\r\n    cluster.fork()\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default app;\r\n"]}