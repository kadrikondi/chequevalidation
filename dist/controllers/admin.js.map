{"version":3,"sources":["../../server/controllers/admin.js"],"names":["AdminController","req","res","body","name","email","password","status","json","message","hashed","bcrypt","hashSync","info","AdminService","newAdmin","save","e","error","_id","params","id","console","log","getAdmin","Admin","getAdminEmail","passwordIsValid","compareSync","token","jwt","sign","config","Admin_secret","code","getAdmins","length","deleteAdmin"],"mappings":"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","file":"admin.js","sourcesContent":["import AdminService from \"../services/admin\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport config from \"../config\";\r\n\r\nclass AdminController {\r\n    static async newAdmin(req, res) {\r\n        try {\r\n            const { name, email, password } = req.body\r\n            if(!name || !email || !password) {\r\n                return res.status(400).json({\r\n                    message: \"No empty field is required\"\r\n                })\r\n            }\r\n            else {\r\n                const hashed = bcrypt.hashSync(password, 10)\r\n                const info = await AdminService.newAdmin(req.body)\r\n                info.password = hashed\r\n                await info.save()\r\n                return res.status(201).json({\r\n                    message: \"created\"\r\n                })\r\n            }\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async getAdmin(req, res) {\r\n        try {\r\n            const _id  = req.params.id;\r\n             console.log(`test ${_id}`)\r\n            const info = await AdminService.getAdmin({_id})\r\n            if(!info) {\r\n                return res.status(400).json({\r\n                    message: \"not found\"\r\n                })\r\n            }\r\n            else {\r\n                return res.status(200).json({\r\n                    info: info,\r\n                    message:'success'\r\n                })\r\n            }\r\n        } catch (e) {\r\n            return res.json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async loginAdmin(req, res) {\r\n        try {\r\n            const { email, password } = req.body\r\n            if(!email || !password) {\r\n                return res.status(400).json({\r\n                    message: \"No empty field\"\r\n                })\r\n            }\r\n            else {\r\n                const Admin = await AdminService.getAdminEmail({email})\r\n                if(!Admin) {\r\n                    return res.status(400).json({\r\n                        message: \"wrong password/email\"\r\n                    })\r\n                }\r\n                else {\r\n                    const passwordIsValid = bcrypt.compareSync(password, Admin.password)\r\n                    if(!passwordIsValid) {\r\n                        return res.status(400).json({\r\n                            message: \"wrong password/email\"\r\n                        })\r\n                    }\r\n                    else {\r\n                        const token = await jwt.sign({_id: Admin._id, email: Admin.email, name: Admin.name}, config.Admin_secret)\r\n                        return res.status(200).json({\r\n                            message: \"successful\",\r\n                            token: token,\r\n                            id:Admin._id,\r\n                            code:\"OK\"\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async getAdmins(req, res) {\r\n        try {\r\n            const info = await AdminService.getAdmins()\r\n            if(info.length < 0) {\r\n                return res.status(400).json({\r\n                    message: \"length 0\"\r\n                })\r\n            }\r\n            return res.status(200).json({\r\n                info: info\r\n            })\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async deleteAdmin(req, res) {\r\n        try {\r\n            const { id } = req.params\r\n            const info = await AdminService.deleteAdmin(id)\r\n            if(!info) {\r\n                return res.status(400).json({\r\n                    message: \"Not found\"\r\n                })\r\n            }\r\n            else {\r\n                return res.status(200).json({\r\n                    message: \"deleted\"\r\n                })\r\n            }\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async updateAdmin(req, res) {\r\n        try {\r\n            const { id } = req.params\r\n            const info = await AdminService.getAdmin(id)\r\n            if(!info) {\r\n                return res.status(400).json({\r\n                    message: \"Not found\"\r\n                })\r\n            }\r\n            else {\r\n                const { email, name } = req.body\r\n                info.email = email || info.email\r\n                info.name = name || info.name\r\n                await info.save()\r\n                return res.status(200).json({\r\n                    message: \"updated\"\r\n                })\r\n            }\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default AdminController;\r\n"]}