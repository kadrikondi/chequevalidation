{"version":3,"sources":["../../server/controllers/user.js"],"names":["UserController","req","res","body","surname","firstname","lastname","gender","email","phone","agegroup","country","state","education","worktype","emailExist","UserService","getUserEmail","userLength","getAllUsers","json","message","image","photo","result","cloudinary","uploader","upload","imgUrl","secure_url","len","length","info","createNewUser","SN","userId","substring","toString","save","stringdata","JSON","stringify","QRCodeOnCodeForImage","QRCode","toDataURL","status","barcode","qrcode","e","error","id","params","getSingleUser","_req","age","deleteAUser","getAllNgUsers","logger","code","getAllMale","getAllFemale"],"mappings":"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","file":"user.js","sourcesContent":["import UserService from '../services/user';\r\nimport cloudinary from 'cloudinary';\r\nimport QRCode from \"qrcode\";\r\n\r\nclass UserController {\r\n  static async createNewUser(req, res) {\r\n    try {\r\n      const {\r\n        surname,\r\n        firstname,\r\n        lastname,\r\n        gender,\r\n        email,\r\n        phone,\r\n        agegroup,\r\n        country,\r\n        state,\r\n        education,\r\n        worktype,\r\n     \r\n      } = req.body;\r\n      const emailExist = await UserService.getUserEmail(email)\r\n      const userLength = await UserService.getAllUsers()\r\n      if (\r\n        !surname ||\r\n        !firstname ||\r\n        !lastname ||\r\n        !gender ||\r\n        !email ||\r\n        !phone ||\r\n        !agegroup ||\r\n        !country ||\r\n        !state ||\r\n        !education ||\r\n        !worktype\r\n      ) {\r\n        return res.json({\r\n          message: 'All fields are required',\r\n        });\r\n      } else if(emailExist) {\r\n        return res.json({\r\n          message: \"Email already exist\"\r\n        })\r\n      }\r\n      // else if (req.file == undefined || req.file == '') {\r\n      //   return res.json({\r\n      //     message: `Error: No file selected`\r\n      //   });\r\n      // } \r\n      else {\r\n        var image =req.body.photo\r\n        const result = await cloudinary.uploader.upload(image);\r\n        var imgUrl = result.secure_url;\r\n        var len = userLength.length\r\n        const info = await UserService.createNewUser(req.body);\r\n        var SN;\r\n        if(len === 0) {\r\n          SN = 1\r\n          info.userId = ` ${info.country.substring(0, 3)}/${info.state.substring(0, 3)}/${SN.toString()}`\r\n          info.photo = imgUrl;\r\n          await info.save()\r\n          let stringdata = JSON.stringify(info)\r\n          let QRCodeOnCodeForImage = await QRCode.toDataURL(stringdata)\r\n          return res.status(201).json({\r\n            info: info,\r\n            message:'success',\r\n            barcode: QRCodeOnCodeForImage\r\n          });\r\n        }\r\n        else {\r\n          SN = len + 1\r\n          \r\n          info.userId = `${info.country.substring(0, 3)}/${info.state.substring(0, 3)}/${SN.toString()}`\r\n       \r\n          info.photo = imgUrl;\r\n          await info.save()\r\n          let stringdata = JSON.stringify(info)\r\n          let QRCodeOnCodeForImage = await QRCode.toDataURL(stringdata)\r\n          return res.status(201).json({\r\n            info: info,\r\n            message:'success',\r\n            qrcode: QRCodeOnCodeForImage\r\n          });\r\n        }\r\n        \r\n      }\r\n    } catch (e) {\r\n      return res.json({\r\n        error: e.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getUser(req, res) {\r\n    try {\r\n      const { id } = req.params;\r\n      const info = await UserService.getSingleUser(id);\r\n      if (!info) {\r\n        return res.status(400).json({\r\n          message: 'Not found',\r\n        });\r\n      } else {\r\n        let stringdata = JSON.stringify(info)\r\n        let QRCodeOnCodeForImage = await QRCode.toDataURL(stringdata)\r\n        return res.status(200).json({\r\n          info: info,\r\n           qrcode: QRCodeOnCodeForImage\r\n        });\r\n      }\r\n    } catch (e) {\r\n      return res.status(500).json({\r\n        error: e.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getAllUsers(_req, res) {\r\n    try {\r\n      const info = await UserService.getAllUsers();\r\n      if (!info) {\r\n        return res.status(400).json({\r\n          message: 'Not found',\r\n        });\r\n      } else {\r\n        return res.status(200).json({\r\n          info: info,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      return res.status(500).json({\r\n        error: e.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async updateUser(req, res) {\r\n    try {\r\n      const { id } = req.params;\r\n      const info = await UserService.getSingleUser(id);\r\n      if (!info) {\r\n        return res.status(400).json({\r\n          message: 'Not found',\r\n        });\r\n      } else {\r\n        info.surname = req.body.surname || info.surname;\r\n        info.firstname = req.body.firstname || info.firstname;\r\n        info.lastname = req.body.lastname || info.lastname;\r\n        info.gender = req.body.gender || info.gender;\r\n        info.education = req.body.education || info.education;\r\n        info.country = req.body.country || info.country;\r\n        info.state = req.body.state || info.state;\r\n        info.email = req.body.email || info.email;\r\n        info.phone = req.body.phone || info.phone;\r\n        info.age = req.body.age || info.age;\r\n        await info.save();\r\n        return res.status(200).json({\r\n          message: 'User information updated',\r\n        });\r\n      }\r\n    } catch (e) {\r\n      return res.status(500).json({\r\n        error: e.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async deleteUser(req, res) {\r\n    try {\r\n      const { id } = req.params;\r\n      const info = await UserService.deleteAUser(id);\r\n      if (!info) {\r\n        return res.status(400).json({\r\n          message: 'Not found',\r\n        });\r\n      } else {\r\n        return res.status(200).json({\r\n          message: 'User deleted',\r\n        });\r\n      }\r\n    } catch (e) {\r\n      return res.status(500).json({\r\n        error: e.message,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  //get all nigerian\r\n  static async findRegisteredNigerian(req, res) {\r\n    try {\r\n      const info =\r\n      await UserService.getAllNgUsers();\r\n      \r\n      if (!info) {\r\n        return res.status(404).json({\r\n          message: 'No user found'\r\n        })\r\n      } else {\r\n        return res.status(200).json({\r\n          info: info\r\n        })\r\n      }\r\n    } catch (error) {\r\n      logger.error('Get all register  nigeria  error: ' + error.message)\r\n      return res.status(500).json({\r\n        code: 'SERVER_ERROR',\r\n        message: 'something went wrong, Please try again'\r\n      });\r\n    }\r\n  }\r\n\r\n //get all male\r\n static async findRegisteredMale(req, res) {\r\n   try {\r\n     const info =\r\n       await UserService.getAllMale();\r\n\r\n     if (!info) {\r\n       return res.status(404).json({\r\n         message: 'No user found'\r\n       })\r\n     } else {\r\n       return res.status(200).json({\r\n         info: info\r\n       })\r\n     }\r\n   } catch (error) {\r\n     logger.error('Get all register  nigeria  error: ' + error.message)\r\n     return res.status(500).json({\r\n       code: 'SERVER_ERROR',\r\n       message: 'something went wrong, Please try again'\r\n     });\r\n   }\r\n }\r\n\r\nstatic async findRegisteredFemale(req, res) {\r\n  try {\r\n    const info =\r\n      await UserService.getAllFemale();\r\n\r\n    if (!info) {\r\n      return res.status(404).json({\r\n        message: 'No user found'\r\n      })\r\n    } else {\r\n      return res.status(200).json({\r\n        info: info\r\n      })\r\n    }\r\n  } catch (error) {\r\n    logger.error('Get all register  nigeria  error: ' + error.message)\r\n    return res.status(500).json({\r\n      code: 'SERVER_ERROR',\r\n      message: 'something went wrong, Please try again'\r\n    });\r\n  }\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default UserController;\r\n"]}